################################Redis配置###################################
#redis主机地址
spring.redis.host=local.redis.com
#redis端口
spring.redis.port=6379
#redis登录密码
spring.redis.password=
#redis连接超时时间
spring.redis.timeout=10s
#连接池中的最小空闲连接 默认 0
spring.redis.lettuce.pool.min-idle=0
#连接池中的最大空闲连接 默认 8
spring.redis.lettuce.pool.max-idle=8
#连接池最大连接数（使用负值表示没有限制） 默认 8
spring.redis.lettuce.pool.max-active=8
#连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
spring.redis.lettuce.pool.max-wait=-1ms

################################数据源配置####################################

#JDBC驱动程序的完全限定名称。默认情况下，根据URL自动检测。
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#数据库的JDBC URL
spring.datasource.url=jdbc:mysql://local.mysql.com:3306/cloud_oauth?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false
#登录数据库的用户名
spring.datasource.username=root
#登录数据库的密码
spring.datasource.password=root
#springboot 2.0 中默认连接池是Hikari！最小连接时间
spring.datasource.hikari.minimum-idle=5
#连接池最大数量
spring.datasource.hikari.maximum-pool-size=20
#指定校验连接合法性执行的sql语句
spring.datasource.hikari.connection-test-query=SELECT 1

################################RabbitMQ配置####################################

#RabbitMQ主机
spring.rabbitmq.host=local.rabbitmq.com
#RabbitMQ端口
spring.rabbitmq.port=5672
#登录用户对代理进行身份验证
spring.rabbitmq.username=cloud-dev
#登录以对代理进行身份验证
spring.rabbitmq.password=cloud-dev
#连接到代理时使用的虚拟主机
spring.rabbitmq.virtual-host=/

#大于0的则表示在容器启动的时候就加载
spring.mvc.servlet.load-on-startup=1

#指定zipkin server的地址
spring.zipkin.base-url=http://localhost:9411
spring.zipkin.enabled=true
spring.zipkin.sender.type=web

#是否使用jwt_token
access_token.store-jwt=false
access_token.jwt-signing-key=xiao@wei@jia@gou=$==+_+%0%:)(:)
access_token.add-userinfo=false

################################日志文件目录配置####################################

#root日志以INFO级别输出
logging.level.root=info
#日志扫描的包的日志级别
logging.level.com.hhsoft.cloud=debug
#设置日志文件存放路径，可以是绝对路径，也可以是相对路径
logging.file=logs/${spring.application.name}.log


#################################Ribbon饥饿加载原理###################################
#我们在使用Spring Cloud的Ribbon或Feign来实现服务调用的时候，如果我们的机器或网络环境等原因不是
#很好的话，有时候会发现这样一个问题：我们服务消费方调用服务提供方接口的时候，第一次请求经常会超时，
#而之后的调用就没有问题了。造成第一次服务调用出现失败的原因主要是Ribbon进行客户端负载均衡的Client
#并不是在服务启动的时候就初始化好的，而是在调用的时候才会去创建相应的Client，所以第一次调用的耗时
#不仅仅包含发送HTTP请求的时间，还包含了创建RibbonClient的时间，这样一来如果创建时间速度较慢，
#同时设置的超时时间又比较短的话，很容易就会出现上面所描述的显现;通过上面的配置完成之后，
#我们尝试重启一下服务消费者，这个时候我们会发现，我们没有开始调用服务接口，
#但是上面初始化负载均衡的日志就已经打印出来了。这就说明我们对ribbon的饥饿加载模块设置已经生效了。

#开启Ribbon的饥饿加载模式
ribbon.eager-load.enabled=true
#指定需要饥饿加载的服务名
ribbon.eager-load.clients=user-center
#配置ribbon读取超时
ribbon.ReadTimeout=10000
#配置ribbon连接超时
ribbon.ConnectTimeout=10000
#配置熔断超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000
